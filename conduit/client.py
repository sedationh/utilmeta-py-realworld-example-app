# Generated by UtilMeta 2.6.0 on 2024-10-22 11:55
# generator spec: openapi 3.1.0
# generator class: utilmeta.core.cli.specs.openapi.OpenAPIClientGenerator
from utilmeta.core import api, cli, response, request
import utype
from utype.types import *


class schemas:
    class UserSchema_O(utype.Schema):
        __options__ = utype.Options(addition=True)
        username: str = utype.Field(
            required=False,
            regex="[A-Za-z0-9][A-Za-z0-9_]{2,18}[A-Za-z0-9]",
            max_length=40,
        )
        bio: str = utype.Field(required=False)
        image: str = utype.Field(required=False)
        id: int = utype.Field(required=False, ge=1, le=2147483647)
        email: str = utype.Field(
            required=False,
            regex="([A-Za-z0-9]+[.-_])*[A-Za-z0-9]+@[A-Za-z0-9-]+(\\.[A-Z|a-z]{2,})+",
            max_length=60,
        )
        token: str = utype.Field(required=False, readonly=True)

    class UserSchema_w(utype.Schema):
        username: str = utype.Field(
            required=False,
            regex="[A-Za-z0-9][A-Za-z0-9_]{2,18}[A-Za-z0-9]",
            max_length=40,
        )
        bio: str = utype.Field(required=False)
        image: str = utype.Field(required=False)
        email: str = utype.Field(
            required=False,
            regex="([A-Za-z0-9]+[.-_])*[A-Za-z0-9]+@[A-Za-z0-9-]+(\\.[A-Z|a-z]{2,})+",
            max_length=60,
        )
        password: str = utype.Field(required=False, max_length=100, min_length=1)

    class UserRegister(utype.Schema):
        username: str = utype.Field(
            required=True,
            regex="[A-Za-z0-9][A-Za-z0-9_]{2,18}[A-Za-z0-9]",
            max_length=40,
        )
        email: str = utype.Field(required=True, max_length=60)
        password: str = utype.Field(required=True, max_length=100, min_length=1)

    class UserLogin(utype.Schema):
        email: str = utype.Field(required=True, max_length=60)
        password: str = utype.Field(required=True, max_length=100, min_length=1)

    class ProfileSchema_O(utype.Schema):
        __options__ = utype.Options(addition=True)
        username: str = utype.Field(
            required=False,
            regex="[A-Za-z0-9][A-Za-z0-9_]{2,18}[A-Za-z0-9]",
            max_length=40,
        )
        bio: str = utype.Field(required=False)
        image: str = utype.Field(required=False)
        following: bool = utype.Field(required=True)

    class CommentSchema_O(utype.Schema):
        __options__ = utype.Options(addition=True)
        body: str = utype.Field(required=False)
        created_at: datetime = utype.Field(
            alias="createdAt", alias_from=["created_at"], required=False
        )
        updated_at: datetime = utype.Field(
            alias="updatedAt", alias_from=["updated_at"], required=False
        )
        author: "schemas.ProfileSchema_O" = utype.Field(required=False)
        id: int = utype.Field(required=False, readonly=True, ge=1, le=2147483647)

    class CommentSchema_a(utype.Schema):
        body: str = utype.Field(required=True)

    class ArticleAPI_ListArticleQuery(utype.Schema):
        offset: int = utype.Field(required=False, ge=0)
        limit: int = utype.Field(required=False, ge=0, le=100)
        tag: str = utype.Field(required=False)
        author: str = utype.Field(required=False)
        favorited: str = utype.Field(required=False)

    class ArticleSchema_O(utype.Schema):
        __options__ = utype.Options(addition=True)
        body: str = utype.Field(required=False)
        created_at: datetime = utype.Field(
            alias="createdAt", alias_from=["created_at"], required=False
        )
        updated_at: datetime = utype.Field(
            alias="updatedAt", alias_from=["updated_at"], required=False
        )
        author: "schemas.ProfileSchema_O" = utype.Field(required=False)
        id: int = utype.Field(required=False, ge=1, le=2147483647)
        slug: str = utype.Field(required=True, max_length=255)
        title: str = utype.Field(required=True, max_length=255)
        description: str = utype.Field(required=True)
        tag_list: List[str] = utype.Field(
            alias="tagList", alias_from=["tag_list"], required=True, max_length=255
        )
        favoritesCount: "schemas.NaturalInt" = utype.Field(
            alias_from=["favorites_count"], required=False
        )
        favorited: bool = utype.Field(required=False, readonly=True)

    class NaturalInt(float, Rule):
        ge = 0

    class ArticleAPI_BaseArticleQuery(utype.Schema):
        offset: int = utype.Field(required=False, ge=0)
        limit: int = utype.Field(required=False, ge=0, le=100)

    class ArticleSchema_a(utype.Schema):
        body: str = utype.Field(required=True)
        title: str = utype.Field(required=False, max_length=255)
        description: str = utype.Field(required=False)
        tag_list: List[str] = utype.Field(
            alias="tagList", alias_from=["tag_list"], required=False, max_length=255
        )

    class ArticleSchema_w(utype.Schema):
        body: str = utype.Field(required=False)
        updated_at: datetime = utype.Field(
            alias="updatedAt", alias_from=["updated_at"], required=False
        )
        title: str = utype.Field(required=False, max_length=255)
        description: str = utype.Field(required=False)
        tag_list: List[str] = utype.Field(
            alias="tagList", alias_from=["tag_list"], required=False, max_length=255
        )

    class RootAPI_TagsSchema(utype.Schema):
        tags: List[str] = utype.Field(required=True)


class responses:
    class RootAPI_ErrorResponse(response.Response):
        result_key = "errors"
        message_key = "msg"
        content_type = "application/json"

    class user_get_UserResponse(response.Response):
        result_key = "user"
        content_type = "application/json"
        result: "schemas.UserSchema_O"

    class profiles_get_ProfileResponse(response.Response):
        result_key = "profile"
        content_type = "application/json"
        result: "schemas.ProfileSchema_O"

    class articles_comments_get_list(response.Response):
        name = "list"
        result_key = "comments"
        content_type = "application/json"
        result: List["schemas.CommentSchema_O"]

    class articles_comments_post_object(response.Response):
        name = "object"
        result_key = "comment"
        content_type = "application/json"
        result: "schemas.CommentSchema_O"

    class articles_get_multi(response.Response):
        """list of objects when path param [slug] is not provided"""

        name = "multi"
        result_key = "articles"
        count_key = "articlesCount"
        content_type = "application/json"
        result: List["schemas.ArticleSchema_O"]

    class articles_get_article_single(response.Response):
        """single object when path param [slug] is provided or new object is created"""

        name = "single"
        result_key = "article"
        content_type = "application/json"
        result: "schemas.ArticleSchema_O"

    class tags_RootAPI_TagsSchemaResponse(response.Response):
        content_type = "application/json"
        result: "schemas.RootAPI_TagsSchema"


class APIClient(cli.Client):
    __info__ = {
        "contact": {},
        "description": "Realworld DEMO - conduit",
        "license": {},
        "termsOfService": "",
        "title": "conduit",
        "version": "1.0.0",
    }
    __servers__ = [
        {"description": "", "url": "http://127.0.0.1:8543/api", "variables": {}}
    ]

    @api.get("/user", tags=["user"], description="", security=[{"jwt": ["login"]}])
    def user_get(
        self,
    ) -> Union[
        "responses.user_get_UserResponse[200]",
        "responses.RootAPI_ErrorResponse",
        "response.Response",
    ]:
        pass

    @api.put("/user", tags=["user"], description="", security=[{"jwt": ["login"]}])
    def user_put(
        self, user: "schemas.UserSchema_w" = request.BodyParam(required=True)
    ) -> Union[
        "responses.user_get_UserResponse[200]",
        "responses.RootAPI_ErrorResponse",
        "response.Response",
    ]:
        pass

    @api.post("/users", tags=["users"], description="")
    def users_post(
        self, user: "schemas.UserRegister" = request.BodyParam(required=True)
    ) -> Union[
        "responses.user_get_UserResponse[200]",
        "responses.RootAPI_ErrorResponse",
        "response.Response",
    ]:
        pass

    @api.post("/users/login", tags=["users"])
    def users_login(
        self, user: "schemas.UserLogin" = request.BodyParam(required=True)
    ) -> Union[
        "responses.user_get_UserResponse[200]",
        "responses.RootAPI_ErrorResponse",
        "response.Response",
    ]:
        pass

    @api.get(
        "/profiles/{username}",
        tags=["profiles"],
        description="",
        security=[{"jwt": ["login"]}],
    )
    def profiles_get(
        self, username: str = request.PathParam(regex="[A-Za-z0-9_]{1,60}")
    ) -> Union[
        "responses.profiles_get_ProfileResponse[200]",
        "responses.RootAPI_ErrorResponse",
        "response.Response",
    ]:
        pass

    @api.post(
        "/profiles/{username}/follow", tags=["profiles"], security=[{"jwt": ["login"]}]
    )
    def profiles_follow(
        self, username: str = request.PathParam(regex="[A-Za-z0-9_]{1,60}")
    ) -> Union[
        "responses.profiles_get_ProfileResponse[200]",
        "responses.RootAPI_ErrorResponse",
        "response.Response",
    ]:
        pass

    @api.delete(
        "/profiles/{username}/follow", tags=["profiles"], security=[{"jwt": ["login"]}]
    )
    def profiles_unfollow(
        self, username: str = request.PathParam(regex="[A-Za-z0-9_]{1,60}")
    ) -> Union[
        "responses.profiles_get_ProfileResponse[200]",
        "responses.RootAPI_ErrorResponse",
        "response.Response",
    ]:
        pass

    @api.get("/articles/{slug}/comments", tags=["articles", "comments"], description="")
    def articles_comments_get(
        self, slug: str = request.PathParam(regex="[a-z0-9]+(?:-[a-z0-9]+)*")
    ) -> Union[
        "responses.articles_comments_get_list[200]",
        "responses.RootAPI_ErrorResponse",
        "response.Response",
    ]:
        pass

    @api.post(
        "/articles/{slug}/comments",
        tags=["articles", "comments"],
        description="",
        security=[{"jwt": ["login"]}],
    )
    def articles_comments_post(
        self,
        slug: str = request.PathParam(regex="[a-z0-9]+(?:-[a-z0-9]+)*"),
        comment: "schemas.CommentSchema_a" = request.BodyParam(required=True),
    ) -> Union[
        "responses.articles_comments_post_object[200]",
        "responses.RootAPI_ErrorResponse",
        "response.Response",
    ]:
        pass

    @api.delete(
        "/articles/{slug}/comments/{id}",
        tags=["articles", "comments"],
        security=[{"jwt": ["login"]}],
    )
    def articles_comments_delete_comment(
        self,
        id: int = request.PathParam(regex="[^/]+"),
        slug: str = request.PathParam(regex="[a-z0-9]+(?:-[a-z0-9]+)*"),
    ) -> Union["responses.RootAPI_ErrorResponse", "response.Response"]:
        pass

    @api.get("/articles", tags=["articles"], description="")
    def articles_get(
        self,
        offset: int = request.QueryParam(required=False, ge=0),
        limit: int = request.QueryParam(required=False, ge=0, le=100),
        tag: str = request.QueryParam(required=False),
        author: str = request.QueryParam(required=False),
        favorited: str = request.QueryParam(required=False),
    ) -> Union[
        "responses.articles_get_multi[200]",
        "responses.RootAPI_ErrorResponse",
        "response.Response",
    ]:
        pass

    @api.post(
        "/articles", tags=["articles"], description="", security=[{"jwt": ["login"]}]
    )
    def articles_post(
        self, article: "schemas.ArticleSchema_a" = request.BodyParam(required=True)
    ) -> Union[
        "responses.articles_get_article_single[200]",
        "responses.RootAPI_ErrorResponse",
        "response.Response",
    ]:
        pass

    @api.get("/articles/feed", tags=["articles"])
    def articles_feed(
        self,
        offset: int = request.QueryParam(required=False, ge=0),
        limit: int = request.QueryParam(required=False, ge=0, le=100),
    ) -> Union[
        "responses.articles_get_multi[200]",
        "responses.RootAPI_ErrorResponse",
        "response.Response",
    ]:
        pass

    @api.get("/articles/{slug}", tags=["articles"])
    def articles_get_article(
        self, slug: str = request.PathParam(regex="[a-z0-9]+(?:-[a-z0-9]+)*")
    ) -> Union[
        "responses.articles_get_article_single[200]",
        "responses.RootAPI_ErrorResponse",
        "response.Response",
    ]:
        pass

    @api.put("/articles/{slug}", tags=["articles"], security=[{"jwt": ["login"]}])
    def articles_update_article(
        self,
        slug: str = request.PathParam(regex="[a-z0-9]+(?:-[a-z0-9]+)*"),
        article: "schemas.ArticleSchema_w" = request.BodyParam(required=True),
    ) -> Union[
        "responses.articles_get_article_single[200]",
        "responses.RootAPI_ErrorResponse",
        "response.Response",
    ]:
        pass

    @api.delete("/articles/{slug}", tags=["articles"], security=[{"jwt": ["login"]}])
    def articles_delete_article(
        self, slug: str = request.PathParam(regex="[a-z0-9]+(?:-[a-z0-9]+)*")
    ) -> Union["responses.RootAPI_ErrorResponse", "response.Response"]:
        pass

    @api.post(
        "/articles/{slug}/favorite", tags=["articles"], security=[{"jwt": ["login"]}]
    )
    def articles_favorite(
        self, slug: str = request.PathParam(regex="[a-z0-9]+(?:-[a-z0-9]+)*")
    ) -> Union[
        "responses.articles_get_article_single[200]",
        "responses.RootAPI_ErrorResponse",
        "response.Response",
    ]:
        pass

    @api.delete(
        "/articles/{slug}/favorite", tags=["articles"], security=[{"jwt": ["login"]}]
    )
    def articles_unfavorite(
        self, slug: str = request.PathParam(regex="[a-z0-9]+(?:-[a-z0-9]+)*")
    ) -> Union[
        "responses.articles_get_article_single[200]",
        "responses.RootAPI_ErrorResponse",
        "response.Response",
    ]:
        pass

    @api.get("/tags")
    def tags(
        self,
    ) -> Union[
        "responses.tags_RootAPI_TagsSchemaResponse[200]",
        "responses.RootAPI_ErrorResponse",
        "response.Response",
    ]:
        pass


client = APIClient(base_url="http://127.0.0.1:8543/api")
